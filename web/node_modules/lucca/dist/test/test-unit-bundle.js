/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
__webpack_require__(2);
__webpack_require__(3);
__webpack_require__(4);
module.exports = __webpack_require__(5);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

/**
 * BaseReceiver Tests
 */
describe("BaseReceiver Suite", function() {
    var recv;
    afterEach(function() {
        recv = null;
    })
    describe("#init", function() {
        it("should throw an error for a null model", function() {
            recv = lucca.vm("test");
            chai.expect(() => { recv.init(new Map(), new Map()) }).to.throw("model undefined is null")
        });
        it("should throw an error for a null view", function() {
            m = lucca.model("test");
            recv = lucca.vm("test").model("test");
            chai.expect(() => { recv.init(lucca.models, new Map()) }).to.throw("view undefined is null")
        });
    });
    describe("#triggerStateChange", function() {
        it("should throw an error for a null model", function() {
            recv = lucca.vm("test");
            chai.expect(() => { recv.triggerStateChange("test") }).to.throw("model cannot be null")
        });
    });
    describe("#getRenderTree", function() {
        it("should throw an error for a null view", function() {
            recv = lucca.vm("test");
            chai.expect(() => { recv.getRenderTree() }).to.throw("view cannot be null")
        });
    });
});

/***/ }),
/* 2 */
/***/ (function(module, exports) {

/**
 * VNodeApp tests
 */
describe('VNodeApp Suite', function() {
    beforeEach(function() {

    });
    describe('health check', function() {
        it('should have a models map', function() {
            chai.expect(lucca.models).to.not.be.undefined;
        });
        it('should have a views map', function() {
            chai.expect(lucca.views).to.not.be.undefined;
        });
        it('should have a receivers map', function() {
            chai.expect(lucca.recv).to.not.be.undefined;
        });
        it('should have a renderer', function() {
            chai.expect(lucca.renderer).to.not.be.undefined;
        });
    });
    describe('#model', function() {
        var m;
        beforeEach(function() {
            m = lucca.model('test');
        });
        afterEach(function() {
            m = null;
        });
        it('should return a Model', function() {
            chai.expect(m).to.not.be.undefined;
            chai.expect(m.constructor.name).to.equal('BaseModel');
        });
        it('should store a created model', function() {
            chai.expect(lucca.models.get('test')).to.equal(m);
        });
    });
    describe('#view', function() {
        var v;
        beforeEach(function() {
            v = lucca.view('test');
        });
        afterEach(function() {
            v = null;
        });
        it('should return a View', function() {
            chai.expect(v).to.not.be.undefined;
            chai.expect(v.constructor.name).to.equal('VNodeView');
        });
        it('should store a created view', function() {
            chai.expect(lucca.views.get('test')).to.equal(v);
        });
    });
    describe('#vm', function() {
        var r;
        beforeEach(function() {
            r = lucca.vm('test');
        });
        afterEach(function() {
            r = null;
        });
        it('should return a Receiver', function() {
            chai.expect(r.constructor.name).to.equal('BaseReceiver');
        });
        it('should store a created receiver', function() {
            chai.expect(lucca.recv.get('test')).to.equal(r);
        });
    });
    describe('#tick', function() {
        var prevTick;
        var prevActionTick;
        beforeEach(function() {
            prevTick = lucca.tick;
            prevActionTick = lucca.actionTick;
            window.requestAnimationFrame = function(tickFn) {
                window.requestAnimationFrame.called = true;
            }
            lucca.actionTick = function() {
                lucca.actionTick.called = true;
            }
        });
        afterEach(function() {
            lucca.tick = prevTick;
            lucca.actionTick = prevActionTick;
            prevTick = null;
            prevActionTick = null;
        });
        it('should call rAF', function() {
            lucca.tick();
            chai.expect(window.requestAnimationFrame.called).to.equal(true);
        });
        it('should call actionTick', function() {
            lucca.tick();
            chai.expect(lucca.actionTick.called).to.equal(true);
        });
    });
    describe('#init', function() {
        var prevMount;
        beforeEach(function() {
            lucca.model("test");
            lucca.view("test");
            lucca.vm("test").model("test").view("test");
            prevMount = lucca.renderer.mount;
            lucca.renderer.mount = function() {
                lucca.renderer.mount.called = true;
            }
        });
        afterEach(function() {
            lucca.renderer.mount = prevMount;
            prevMount = null;
        })
        it('should call the renderer', function() {
            lucca.init(document.body);
            chai.expect(lucca.renderer.mount.called).to.equal(true);
        })
    });
});

/***/ }),
/* 3 */
/***/ (function(module, exports) {

/**
 * Base Model Tests
 */
describe("BaseModel Suite", function() {
    var model;
    beforeEach(function() {
        model = lucca.model("hello");
    });
    describe('#define', function() {
        it('should define a model', function() {
            model.define({
                hello:'world'
            });
            chai.expect(model.data.hello).to.equal('world');
        })
    })
})

/***/ }),
/* 4 */
/***/ (function(module, exports) {

/**
 * VNode Provider Tests
 */
describe("VNode Provider Suite", function() {
    describe("#provide", function() {
        it("should produce a VNode", function() {
            v = lucca.htmlProvider.provide("div", {}, [])
            chai.expect(v).to.not.be.null;
        });
        it("should provide a VNode with the proper tag name", function() {
            v = lucca.htmlProvider.provide("div", {}, [])
            chai.expect(v.vnodeSelector).to.equal('div');
        });
    });
    describe("#forEach", function() {
        it("should provide a list of VNodes after iteration", function() {
            var data = [{
                content: "hello"
            }, {
                content: "world"
            }];
            var iteratorFn = function(item) {
                return ["div", {}, item.content];
            }
            var elements = lucca.htmlProvider.forEach(data, iteratorFn);
            chai.expect(elements.length).to.equal(data.length);
            chai.expect(elements[0][0]).to.equal("div");
            chai.expect(elements[0][2]).to.equal("hello");
            chai.expect(elements[1][2]).to.equal("world");
        });
        it("should throw an error if data is not an array", function() {
            chai.expect(() => { lucca.htmlProvider.forEach({}) }).to.throw("data must be iterable to use forEach");
        })
    })
})

/***/ }),
/* 5 */
/***/ (function(module, exports) {

/**
 * VNodeView Test Suite
 */
var view;
var model;
beforeEach(function() {
    view = lucca.view('test');
    model = lucca.model('test');
});
describe('VNodeView Suite', function() {     
    var viewConstructor;
    var defaultData;
    beforeEach(function() {
        viewConstructor = function(h, v, i, a) {
            viewConstructor.called = true;
            viewConstructor.arguments = arguments;
        };
        defaultData = {
            'hello':'world'
        };
        model.define(defaultData);
        view.define(viewConstructor);
    });
    describe('#render', function() {
        it('should call the view constructor', function() {
            var vnode = view.render(model);
            chai.expect(viewConstructor.called).to.be.true;
        });
    });
});

/***/ })
/******/ ]);